{"version":3,"file":"remoteEntry.js","mappings":";;;;UAAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;;;;;WCAA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,gBAAgB,qBAAqB;WACrC;WACA;WACA;WACA;WACA;;WAEA;;WAEA;WACA;;WAEA;WACA,gCAAgC;WAChC;WACA;WACA;WACA,IAAI;WACJ,cAAc;WACd;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,2FAA2F,kBAAkB;WAC7G;WACA,OAAO;WACP,OAAO;;WAEP;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,gBAAgB;WAChB;WACA,gBAAgB;WAChB;WACA;WACA;WACA;WACA;WACA,eAAe;WACf;WACA,eAAe;WACf;WACA;WACA,eAAe;WACf,cAAc;WACd;WACA;WACA;WACA;WACA;WACA;WACA;WACA,mBAAmB;WACnB;WACA;WACA,mBAAmB;WACnB,kBAAkB;WAClB;WACA;WACA,eAAe;WACf;WACA;WACA;WACA,eAAe;WACf;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,gBAAgB,iFAAiF;WACjG;WACA,2FAA2F,kBAAkB;WAC7G;WACA,OAAO;WACP;WACA,KAAK;WACL;WACA,KAAK;WACL;WACA;WACA;;WAEA;;WAEA;;WAEA;;;;;WA5IA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,gBAAgB,qBAAqB;WACrC;WACA;WACA;WACA;WACA;;WAEA;;WAEA;WACA;;WAEA;WACA,gCAAgC;WAChC;WACA;WACA;WACA,IAAI;WACJ,cAAc;WACd;WACA;WACA;WACA;WACA;WACA;WACA;WACA,0FAA0F,kBAAkB;WAC5G;WACA,MAAM;WACN,KAAK;WACL;WACA,KAAK;WACL;WACA;WACA;;WAEA;;WAEA;;WAEA;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://commonjs/webpack/bootstrap","webpack://commonjs/webpack/runtime/define property getters","webpack://commonjs/webpack/runtime/ensure chunk","webpack://commonjs/webpack/runtime/get javascript chunk filename","webpack://commonjs/webpack/runtime/hasOwnProperty shorthand","webpack://commonjs/webpack/runtime/readFile chunk loading","webpack://commonjs/webpack/container-entry"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded chunks\n// \"0\" means \"already loaded\", Promise means loading\nvar installedChunks = {\n\t\"host\": 0\n};\n\n// no on chunks loaded\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++) {\n\t\tif(installedChunks[chunkIds[i]]) {\n\t\t\tinstalledChunks[chunkIds[i]][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\n};\n\n// ReadFile + VM.run chunk loading for javascript\n__webpack_require__.f.readFileVm = function(chunkId, promises) {\n\n\tvar installedChunkData = installedChunks[chunkId];\n\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\t\t// array of [resolve, reject, promise] means \"currently loading\"\n\t\tif(installedChunkData) {\n\t\t\tpromises.push(installedChunkData[2]);\n\t\t} else {\n\t\t\tif(true) { // all chunks have JS\n\t\t\t\t// load the chunk and return promise to it\n\t\t\t\tvar promise = new Promise(async function(resolve, reject) {\n\t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n\t\t\t\t\tvar filename = require('path').join(__dirname, \"\" + __webpack_require__.u(chunkId));\n\t\t\t\t\tvar fs = require('fs');\n\t\t\t\t\tif(fs.existsSync(filename)) {\n\t\t\t\t\t\tconsole.log(filename,\"exists locally\")\n\t\t\t\t\t\tfs.readFile(filename, 'utf-8', function(err, content) {\n\t\t\t\t\t\t\tif(err) return reject(err);\n\t\t\t\t\t\t\tvar chunk = {};\n\t\t\t\t\t\t\trequire('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\n})', filename)(chunk, require, require('path').dirname(filename), filename);\n\t\t\t\t\t\t\tinstallChunk(chunk);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t    function loadScript(url,cb,chunkID) {\n\t\t\t\t\t\t        var url;\n\t\t\t\t\t\t        var cb = arguments[arguments.length - 1];\n\t\t\t\t\t\t        if (typeof cb !== \"function\") {\n\t\t\t\t\t\t            throw new Error(\"last argument should be a function\");\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t        if (arguments.length === 2) {\n\t\t\t\t\t\t            url = arguments[0];\n\t\t\t\t\t\t        } else if (arguments.length === 3) {\n\t\t\t\t\t\t            url = new URL(arguments[1], arguments[0]).toString();\n\t\t\t\t\t\t        } else {\n\t\t\t\t\t\t            throw new Error(\"invalid number of arguments\");\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t      if(global.webpackChunkLoad){\n\t\t\t\t\t\t        global.webpackChunkLoad(url).then(function(resp){\n\t\t\t\t\t\t          return resp.text();\n\t\t\t\t\t\t        }).then(function(rawData){\n\t\t\t\t\t\t          cb(null, rawData);\n\t\t\t\t\t\t        }).catch(function(err){\n\t\t\t\t\t\t          console.error('Federated Chunk load failed', error);\n\t\t\t\t\t\t          return cb(error)\n\t\t\t\t\t\t        });\n\t\t\t\t\t\t      } else {\n\t\t\t\t\t\t        //TODO https support\n\t\t\t\t\t\t        let request = (url.startsWith('https') ? require('https') : require('http')).get(url, function (resp) {\n\t\t\t\t\t\t          if (resp.statusCode === 200) {\n\t\t\t\t\t\t            let rawData = '';\n\t\t\t\t\t\t            resp.setEncoding('utf8');\n\t\t\t\t\t\t            resp.on('data', chunk => {\n\t\t\t\t\t\t              rawData += chunk;\n\t\t\t\t\t\t            });\n\t\t\t\t\t\t            resp.on('end', () => {\n\t\t\t\t\t\t              cb(null, rawData);\n\t\t\t\t\t\t            });\n\t\t\t\t\t\t          } else {\n\t\t\t\t\t\t            cb(resp);\n\t\t\t\t\t\t          }\n\t\t\t\t\t\t        });\n\t\t\t\t\t\t        request.on('error', error => {\n\t\t\t\t\t\t          console.error('Federated Chunk load failed', error);\n\t\t\t\t\t\t          return cb(error)\n\t\t\t\t\t\t        });\n\t\t\t\t\t\t      }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\tconsole.log('needs to load remote script');\n\t\t\t\t\t\tconsole.log('before remote var creation')\n\t\t\t\t\t\tconsole.log('before remote var creation', undefined)\n\t\t\t\t\t\tvar remotes = undefined;\n\t\t\t\t\t\tconsole.log('remotes in chunk load',remotes)\n\t\t\t\t\t\tconsole.log('global.REMOTE_CONFIG',global.REMOTE_CONFIG)\n\t\t\t\t\t\tif(global.REMOTE_CONFIG && !global.REMOTE_CONFIG[\"host\"]) {\n\t\t\t\t\t\t                            if(global.loadedRemotes){\n\t\t\t\t\t\t                              for (const property in global.loadedRemotes) {\n\t\t\t\t\t\t                                global.REMOTE_CONFIG[property] = global.loadedRemotes[property].path\n\t\t\t\t\t\t                              }\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\t\tObject.assign(global.REMOTE_CONFIG, remotes)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar requestedRemote = global.REMOTE_CONFIG[\"host\"]\n\t\t\t\t\t\tif(typeof requestedRemote === 'function'){\n\t\t\t\t\t\t                              requestedRemote = await requestedRemote()\n\t\t\t\t\t\t                            }\n\t\t\t\t\t\tconsole.log('requestedRemote',requestedRemote);\n\t\t\t\t\t\tvar scriptUrl = new URL(requestedRemote.split(\"@\")[1]);\n\t\t\t\t\t\tvar chunkName = __webpack_require__.u(chunkId);\n\t\t\t\t\t\tconsole.log('remotes global',global.REMOTE_CONFIG);\n\t\t\t\t\t\tconsole.log('chunkname to request',chunkName);\n\t\t\t\t\t\tvar fileToReplace = require('path').basename(scriptUrl.pathname);\n\t\t\t\t\t\tscriptUrl.pathname = scriptUrl.pathname.replace(fileToReplace, chunkName);\n\t\t\t\t\t\tconsole.log('will load remote chunk', scriptUrl.toString());\n\t\t\t\t\t\tloadScript(scriptUrl.toString(), function(err, content) {\n\t\t\t\t\t\t\tif(err) {console.error('error loading remote chunk', scriptUrl.toString(),'got',content); return reject(err);}\n\t\t\t\t\t\t\tvar chunk = {};\n\t\t\t\t\t\t\trequire('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\n})', filename)(chunk, require, require('path').dirname(filename), filename);\n\t\t\t\t\t\t\tinstallChunk(chunk);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\t\t\t} else installedChunks[chunkId] = 0;\n\t\t}\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","var moduleMap = {\n\t\"./container\": () => {\n\t\treturn __webpack_require__.e(\"src_container_js\").then(() => (() => ((__webpack_require__(/*! ./src/container.js */ \"./src/container.js\")))));\n\t}\n};\nvar get = (module, getScope) => {\n\t__webpack_require__.R = getScope;\n\tgetScope = (\n\t\t__webpack_require__.o(moduleMap, module)\n\t\t\t? moduleMap[module]()\n\t\t\t: Promise.resolve().then(() => {\n\t\t\t\tthrow new Error('Module \"' + module + '\" does not exist in container.');\n\t\t\t})\n\t);\n\t__webpack_require__.R = undefined;\n\treturn getScope;\n};\nvar init = (shareScope, initScope) => {\n\tif (!__webpack_require__.S) return;\n\tvar oldScope = __webpack_require__.S[\"default\"];\n\tvar name = \"default\"\n\tif(oldScope && oldScope !== shareScope) throw new Error(\"Container initialization failed as it has already been initialized with a different share scope\");\n\t__webpack_require__.S[name] = shareScope;\n\treturn __webpack_require__.I(name, initScope);\n};\n\n// This exports getters to disallow modifications\n__webpack_require__.d(exports, {\n\tget: () => (get),\n\tinit: () => (init)\n});"],"names":[],"sourceRoot":""}